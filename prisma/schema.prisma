generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  GUEST
}

enum AccountCurrency {
  AUD
  BRL
  CAD
  CHF
  CZK
  EUR
  GBP
  USD
}

enum Market {
  B3
  CRYPTO
  FOREX
}

enum Platform {
  MT4
  MT5
  CTRADER
  DX_TRADE
  MATCH_TRADER
  TRADE_LOCKER
  PROFIT
}

enum Direction {
  BUY
  SELL
}

enum Status {
  PENDING
  OPEN
  PARTIAL
  CLOSED
  CANCELED
}

enum CreationMethod {
  MANUAL
  AUTOMATION
}

enum LearningCategory {
  PSYCHOLOGY
  TECHNICAL
  RISK_MANAGEMENT
}

model User {
  id              String   @id @default(cuid())
  planId          String?
  firstName       String
  lastName        String
  username        String   @unique
  email           String   @unique
  isEmailVerified Boolean  @default(false)
  phone           String
  role            UserRole @default(USER)
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  otpCode  OtpCode[]
  accounts Account[]
  Strategy Strategy[]

  plan SubscriptionPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@map("users")
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String
  reason    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("otp_codes")
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Decimal
  features    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]

  @@map("subscription_plans")
}

model Account {
  id              String          @id @default(uuid())
  userId          String
  externalId      String
  description     String?
  market          Market[]
  currency        AccountCurrency @default(USD)
  platform        Platform
  isPropFirm      Boolean
  broker          String
  initialBalance  Decimal
  currentBalance  Decimal
  floatingBalance Decimal
  credits         Decimal         @default(0)
  disabled        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  journals  Journal[]
  learnings LearningList[]

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, externalId])
  @@index([userId, externalId])
  @@map("accounts")
}

// Usado para descrever estrat√©gias de trading
model Strategy {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean? @default(false)
  imageUrls   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  journals Journal[]

  user User @relation(fields: [userId], references: [id])

  @@map("strategies")
}

model Journal {
  id              String         @id @default(uuid())
  accountId       String
  strategyId      String?
  creationMethod  CreationMethod
  externalTradeId String
  symbol          String
  entryPrice      Decimal
  stopPrice       Decimal
  takePrices      Decimal[]
  investment      Decimal
  lots            Decimal
  result          Decimal?
  commission      Decimal?
  swap            Decimal?
  fee             Decimal?
  total           Decimal?
  riskRewardRatio Decimal?
  imageUrls       String[]
  status          Status
  direction       Direction
  timeDateStart   DateTime
  timeDateEnd     DateTime?
  tradeDuration   Int?
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  account            Account            @relation(fields: [accountId], references: [id])
  strategy           Strategy?          @relation(fields: [strategyId], references: [id])
  detailsMetaTrader5 JournalDetailMT5[] @relation("JournalToDetailMT5")

  @@unique([accountId, externalTradeId])
  @@index([accountId])
  @@index([accountId, strategyId])
  @@index([accountId, externalTradeId])
  @@index([accountId, symbol])
  @@index([accountId, symbol, direction])
  @@index([accountId, timeDateStart, timeDateEnd])
  @@map("journals")
}

model JournalDetailMT5 {
  id              String   @id @default(uuid())
  accountId       String
  externalTradeId String
  ticket          String
  symbol          String
  comment         String?
  lots            Decimal
  entryPrice      Decimal
  stopPrice       Decimal
  takePrice       Decimal
  investment      Decimal
  riskRewardRatio Decimal
  result          Decimal
  commission      Decimal
  swap            Decimal
  fee             Decimal
  time            DateTime
  type            String
  entry           String
  reason          String
  orderId         String
  positionId      String
  magic           String

  journal Journal @relation("JournalToDetailMT5", fields: [accountId, externalTradeId], references: [accountId, externalTradeId])

  @@index([accountId])
  @@index([externalTradeId])
  @@index([accountId, externalTradeId])
  @@index([accountId, externalTradeId, ticket])
  @@map("journal_detail_mt5")
}

model LearningList {
  id          String           @id @default(uuid())
  accountId   String
  title       String
  description String?
  category    LearningCategory
  imageUrls   String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  account Account @relation(fields: [accountId], references: [id])

  @@map("learning_lists")
}
