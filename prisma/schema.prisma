generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  GUEST
}

enum AccountCurrency {
  AUD
  BRL
  CAD
  CHF
  CZK
  EUR
  GBP
  USD
}

enum Market {
  B3
  CRYPTO
  FOREX
}

enum Platform {
  MT4
  MT5
  CTRADER
  DX_TRADE
  MATCH_TRADER
  TRADE_LOCKER
  PROFIT
}

enum Direction {
  LONG
  SHORT
}

enum Status {
  PENDING
  OPEN
  PARTIAL
  CLOSED
  CANCELED
}

enum LearningCategory {
  PSYCHOLOGY
  TECHNICAL
  RISK_MANAGEMENT
}

model User {
  id              String   @id @default(uuid())
  planId          String?
  firstName       String
  lastName        String
  username        String   @unique
  email           String   @unique
  isEmailVerified Boolean  @default(false)
  phone           String
  role            UserRole @default(USER)
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  class               Class[]
  otpCode             OtpCode[]
  accounts            Account[]
  classManager        ClassManager[]
  classStudent        ClassStudent[]
  Strategy            Strategy[]
  tradeJournalComment JournalComment[]

  plan SubscriptionPlan? @relation(fields: [planId], references: [id], onDelete: SetNull)

  @@map("users")
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  email     String
  token     String
  reason    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("otp_codes")
}

model SubscriptionPlan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Decimal
  features    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]

  @@map("subscription_plans")
}

model Account {
  id              String               @id @default(uuid())
  userId          String
  market          Market[]
  currency        AccountCurrency @default(USD)
  platform        Platform
  isPropFirm      Boolean
  broker          String
  initialBalance  Decimal
  currentBalance  Decimal
  floatingBalance Decimal
  credits         Decimal              @default(0)
  disabled        Boolean              @default(false)
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  journals  Journal[]
  learnings LearningList[]

  user User @relation(fields: [userId], references: [id])

  @@map("accounts")
}

// Usado para descrever estrat√©gias de trading
model Strategy {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  isDefault   Boolean? @default(false)
  imageUrls   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  journals Journal[]

  user User @relation(fields: [userId], references: [id])

  @@map("strategies")
}

model Journal {
  id              String         @id @default(uuid())
  accountId       String
  strategyId      String?
  asset           String
  entryPrice      Decimal
  stopPrice       Decimal
  takePrices      Decimal[]
  investment      Decimal
  lots            Decimal
  result          Decimal?
  riskRewardRatio Decimal?
  imageUrls       String[]
  status          Status
  direction       Direction
  tradeDate       DateTime
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  tradeJournalComment JournalComment[]

  account  Account   @relation(fields: [accountId], references: [id])
  strategy Strategy? @relation(fields: [strategyId], references: [id])

  @@map("journals")
}

model JournalComment {
  id        String   @id @default(uuid())
  tradeId   String
  userId    String
  classId   String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  trade Journal @relation(fields: [tradeId], references: [id], onDelete: Cascade)

  @@map("journal_comments")
}

model LearningList {
  id          String           @id @default(uuid())
  accountId   String
  title       String
  description String?
  category    LearningCategory
  imageUrls   String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  account Account @relation(fields: [accountId], references: [id])

  @@map("learning_lists")
}

model Class {
  id        String   @id @default(uuid())
  name      String
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managers            ClassManager[]
  students            ClassStudent[]
  tradeJournalComment JournalComment[]

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("classes")
}

model ClassManager {
  id      String @id @default(uuid())
  classId String
  userId  String

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
  @@map("class_managers")
}

model ClassStudent {
  id      String @id @default(uuid())
  classId String
  userId  String

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
  @@map("class_students")
}
